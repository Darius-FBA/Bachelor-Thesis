
param N: i16;
param memcpyParams: comptime_struct;
param syncParams: comptime_struct;

const timestamp = @import_module("<time>");
const sys_mod = @import_module("<memcpy/memcpy>", memcpyParams);
const sync_mod = @import_module("syncpe.csl", @concat_structs(syncParams, .{
    .f_callback = sys_mod.unblock_cmd_stream,
    .input_queues = [3]u16{2, 3, 4},
    .output_queues = [3]u16{2, 3, 4},
}));


const size: i16 = 1024 * 4;
var x = @zeros([size]f32);
var y = @zeros([size]f32);
var result = @zeros([1]f32); // each PE stores its partial sum here

// Timestamp data
var tscStartBuffer = @zeros([timestamp.tsc_size_words]u16);
var tscEndBuffer   = @zeros([timestamp.tsc_size_words]u16);
var time_buf_f32   = @zeros([3]f32);
var time_ref_f32   = @zeros([2]f32);

const ptr_x: [*]f32 = &x;
const ptr_y: [*]f32 = &y;
const ptr_result: [*]f32 = &result;
const ptr_time_memcpy: [*]f32 = &time_buf_f32;
const ptr_time_ref: [*]f32 = &time_ref_f32;

fn f_sync() void {
    sync_mod.f_sync();
}

fn f_tic() void {
    timestamp.get_timestamp(&tscStartBuffer);
    sys_mod.unblock_cmd_stream();
}

fn f_dot() void {
    var sum: f32 = 0.0;
    var i: i16 = 0;
    while (i < N) : (i += 1) {
        sum += x[i] * y[i];
    }
    result[0] = sum;
    sys_mod.unblock_cmd_stream();
}

fn f_toc() void {
    timestamp.get_timestamp(&tscEndBuffer);
    sys_mod.unblock_cmd_stream();
}

fn f_memcpy_timestamps() void {
    var lo_: u16 = 0;
    var hi_: u16 = 0;

    lo_ = tscStartBuffer[0];
    hi_ = tscStartBuffer[1];
    time_buf_f32[0] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_));

    lo_ = tscStartBuffer[2];
    hi_ = tscEndBuffer[0];
    time_buf_f32[1] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_));

    lo_ = tscEndBuffer[1];
    hi_ = tscEndBuffer[2];
    time_buf_f32[2] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_));

    sys_mod.unblock_cmd_stream();
}

fn f_reference_timestamps() void {
    var lo_: u16 = 0;
    var hi_: u16 = 0;

    lo_ = sync_mod.tscRefBuffer[0];
    hi_ = sync_mod.tscRefBuffer[1];
    time_ref_f32[0] = @bitcast(f32, (@as(u32, hi_) << @as(u16,16)) | @as(u32, lo_));

    lo_ = sync_mod.tscRefBuffer[2];
    time_ref_f32[1] = @bitcast(f32, @as(u32, lo_));
    sys_mod.unblock_cmd_stream();
}

comptime {
    @comptime_assert(N <= size);
}

comptime {
    @export_symbol(ptr_x, "x");
    @export_symbol(ptr_y, "y");
    @export_symbol(ptr_result, "result");
    @export_symbol(ptr_time_memcpy, "time_memcpy");
    @export_symbol(ptr_time_ref, "time_ref");

    @export_symbol(f_sync);
    @export_symbol(f_tic);
    @export_symbol(f_dot);
    @export_symbol(f_toc);
    @export_symbol(f_memcpy_timestamps);
    @export_symbol(f_reference_timestamps);
}
