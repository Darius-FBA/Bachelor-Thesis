param M: i16;
param N: i16;
param width: i16;

const height: i16 = 1;

const memcpy = @import_module("<memcpy/get_params>", .{ .width = width, .height = 1 });
const sync = @import_module("synclayout.csl", .{
    .colors = [5]color{ @get_color(0), @get_color(1), @get_color(2), @get_color(3), @get_color(4) },
    .entrypoints = [4]local_task_id{
        @get_local_task_id(15),
        @get_local_task_id(16),
        @get_local_task_id(17),
        @get_local_task_id(18),
    },
    .width = width,
    .height = height,
});

layout {
    @set_rectangle(width, height);

    var px: i16 = 0;
    while (px < width) : (px += 1) {
        const memcpyParams = memcpy.get_params(px);
        const syncParams = sync.get_params(px, 0);

        @set_tile_code(px, 0, "pe_program.csl", .{
            .memcpyParams = memcpyParams,
            .syncParams = syncParams,
            .M = M,
            .N = N,
            .alpha = 2.0,
        });
    }

  @export_name("A", [*]f32, false);
  @export_name("x", [*]f32, false);
  @export_name("y", [*]f32, false);
  @export_name("time_memcpy", [*]f32, false);
  @export_name("time_ref", [*]f32, false);

  @export_name("f_sync", fn()void);
  @export_name("f_tic", fn()void);
  @export_name("f_ger", fn()void);
  @export_name("f_toc", fn()void);
  @export_name("f_memcpy_timestamps", fn()void);
  @export_name("f_reference_timestamps", fn()void);
}
